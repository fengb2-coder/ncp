#!/usr/bin/env python3
from numpy.core.numeric import NaN
import rospy
from geometry_msgs.msg import Twist, Vector3
from sensor_msgs.msg import LaserScan
import numpy as np
import tensorflow as tf
import kerasncp as kncp
from kerasncp.tf import LTCCell
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError
import cv2 as cv


# path = '/home/laiy/gitrepos/cyber/ws/src/Jackal_NCP/rosbag/model/model_angular'
# model_angular = tf.keras.models.load_model(path)
# path = '/home/laiy/gitrepos/cyber/ws/src/Jackal_NCP/rosbag/model/model_linear'
# model_linear = tf.keras.models.load_model(path)
path = '/home/laiy/gitrepos/cyber/ws/src/Jackal_NCP/rosbag/model/model_line'
model_line = tf.keras.models.load_model(path)

class Handler: 
    def __init__(self):
        self.angularz = []
        self.linearx = []
        self.cmd_pub = rospy.Publisher("/cmd_vel", Twist, queue_size = 10)
        # self.scan_sub = rospy.Subscriber("/front/scan", LaserScan, self.scan_callback)
        self. image_sub = rospy.Subscriber("/camera/color/image_raw", Image, self.image_callback)
        self.rate = rospy.Rate(1/20) 
        self.bridge = CvBridge()


        print("INIT COMPLETE")

        # while not rospy.is_shutdown(): 
        #     if self.linearx or self.angularz:       
        #         self.cmd_pub.publish(Twist(linear = Vector3(x = self.linearx, y = 0.0, z = 0.0), angular = Vector3(x = 0, y = 0, z = self.angularz)))



    def scan_callback(self, data):
        # print("data.ranges ", np.shape(data.ranges))
        ranges = np.transpose(np.asarray([data.ranges])).astype(np.float32)
        ranges = np.nan_to_num(ranges, posinf=100, neginf=100)
        print("ranges ", np.isnan(ranges.any()))
        input = np.array([[ranges]])
        # print("input ", np.shape(input))
        pred_ang = model_angular(input).numpy()
        pred_linear = model_linear(input).numpy()
        # print("pred = ", pred)
        self.angularz = pred_ang[0][0][0]
        self.linearx = pred_linear[0][0][0]
        if np.isnan(self.angularz): self.angularz = 0
        if np.isnan(self.linearx): self.linearx = 0
        # if not self.angularz and not self.linearx: 
            # self.linearx = 0.1 
            # self.angularz = 0.05
        print("pred = ", self. linearx, " ", self.angularz)
        self.cmd_pub.publish(Twist(linear = Vector3(x = self.linearx, y = 0.0, z = 0.0), angular = Vector3(x = 0, y = 0, z = self.angularz)))

    def image_callback(self, data):
        try:
            image = self.bridge.imgmsg_to_cv2(data, "bgr8")
            image = cv.resize(image, (50,50))

            img = image
            lower_range = np.array([0, 100, 180]) 
            upper_range = np.array([200, 150, 200])   
            mask = cv.inRange(img,lower_range,upper_range) 
            result = cv.bitwise_and(img,img,mask = mask) 
            result = cv.cvtColor(result, cv.COLOR_BGR2GRAY)
            image = result

            cv.imshow("Display window", image)
            
            data = np.asarray(image)
            data_flatten = np.transpose(data.flatten())
            data_flatten = np.transpose(np.asarray([data_flatten]))
            input = np.array([[data_flatten]])
            input = tf.keras.utils.normalize(data_flatten)
            pred = model_line(input).numpy()
            self.angularz = pred[0][0][0]
            print("pred = ",  self.angularz)
            self.cmd_pub.publish(Twist(linear = Vector3(x = 0.1, y = 0.0, z = 0.0), angular = Vector3(x = 0, y = 0, z = self.angularz)))

        except CvBridgeError as e:
            print(e)


def main():
    rospy.init_node('load_model', anonymous = True)
    handler = Handler()
    rospy.spin()


if __name__=='__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass